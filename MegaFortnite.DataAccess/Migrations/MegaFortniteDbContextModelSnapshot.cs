// <auto-generated />
using System;
using MegaFortnite.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MegaFortnite.DataAccess.Migrations
{
    [DbContext(typeof(MegaFortniteDbContext))]
    partial class MegaFortniteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MegaFortnite.Domain.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("NickName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 3, 15, 23, 53, 13, 422, DateTimeKind.Utc).AddTicks(8973),
                            CustomerId = new Guid("a6b3ee91-1be7-4eab-a15b-7bffc8b94bff"),
                            NickName = "xXx_predator_xXx",
                            Rate = 0,
                            WinRate = 0m
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 3, 15, 23, 53, 13, 422, DateTimeKind.Utc).AddTicks(9179),
                            CustomerId = new Guid("a6b3ee91-1be7-4eab-a15b-7bffc8b94bfa"),
                            NickName = "HArU6ATOP",
                            Rate = 0,
                            WinRate = 0m
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 3, 15, 23, 53, 13, 422, DateTimeKind.Utc).AddTicks(9182),
                            CustomerId = new Guid("a6b3ee91-1be7-4eab-a15b-7bffc8b94bfb"),
                            NickName = "4TO_C_E6AJIOM",
                            Rate = 0,
                            WinRate = 0m
                        });
                });

            modelBuilder.Entity("MegaFortnite.Domain.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LobbyKey")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MegaFortnite.Domain.Models.SessionResult", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("GameProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SessionId", "GameProfileId");

                    b.HasIndex("GameProfileId");

                    b.HasIndex("SessionId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("MegaFortnite.Domain.Models.Session", b =>
                {
                    b.HasOne("MegaFortnite.Domain.Models.Profile", "Owner")
                        .WithMany("Sessions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MegaFortnite.Domain.Models.SessionResult", b =>
                {
                    b.HasOne("MegaFortnite.Domain.Models.Profile", "GameProfile")
                        .WithMany()
                        .HasForeignKey("GameProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaFortnite.Domain.Models.Session", "Session")
                        .WithMany("Results")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameProfile");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MegaFortnite.Domain.Models.Profile", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("MegaFortnite.Domain.Models.Session", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
